{
    "status": "ok",
    "result": {
        "output": "\npredicate INCLUDES is declared to use unknown or empty type COMPONENT\n\n\nwarning: parameter ?WEAPON of op AFFIX has unknown or empty type ARROW. skipping op\nwarning: parameter ?LOCATION of op HUNT-CHICKEN has unknown or empty type FARM. skipping op\nwarning: parameter ?TOOL of op FLETCH-SHAFTS has unknown or empty type KNIFE. skipping op\nwarning: parameter ?LOCATION of op CHOP-TREES has unknown or empty type FOREST. skipping op --- OK.\n Match tree built with 25 nodes.\n\nPDDL problem description loaded: \n\tDomain: RUNESCAPE\n\tProblem: MAKESWORD\n\t#Actions: 25\n\t#Fluents: 24\nLandmarks found: 6\nStarting search with IW (time budget is 60 secs)...\nrel_plan size: 9\n#RP_fluents 13\nCaption\n{#goals, #UNnachieved,  #Achieved} -> IW(max_w)\n\n{6/6/0}:IW(1) -> [2][3][4][5][6][7]rel_plan size: 7\n#RP_fluents 10\n{6/5/1}:IW(1) -> [2][3]rel_plan size: 5\n#RP_fluents 8\n{6/4/2}:IW(1) -> [2][3][4]rel_plan size: 4\n#RP_fluents 5\n{6/3/3}:IW(1) -> [2][3]rel_plan size: 1\n#RP_fluents 1\n{6/1/5}:IW(1) -> [2]rel_plan size: 0\n#RP_fluents 0Plan found with cost: 14\nTotal time: -7.59959e-10\nNodes generated during search: 70\nNodes expanded during search: 41\nIW search completed\n",
        "parseStatus": "ok",
        "error": null,
        "type": "full",
        "length": 14,
        "plan": [
            {
                "action": "  (:action equip\n    :parameters (player pickaxe shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed pickaxe)\n      )\n    :effect\n      (and\n        (has player pickaxe)\n      )\n  )",
                "name": "(equip player pickaxe shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "pickaxe",
                    "shed"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player shed anvil)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player anvil)\n        )\n        (not\n          (= shed anvil)\n        )\n      )\n    :effect\n      (and\n        (at player anvil)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed anvil)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "anvil"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player anvil mine)\n    :precondition\n      (and\n        (at player anvil)\n        (not\n          (at player mine)\n        )\n        (not\n          (= anvil mine)\n        )\n      )\n    :effect\n      (and\n        (at player mine)\n        (not\n          (at player anvil)\n        )\n      )\n  )",
                "name": "(move-to player anvil mine)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "anvil",
                    "mine"
                ]
            },
            {
                "action": "  (:action mine-rocks\n    :parameters (player mine pickaxe rock ore)\n    :precondition\n      (and\n        (at player mine)\n        (has player pickaxe)\n        (has mine rock)\n      )\n    :effect\n      (and\n        (has player ore)\n      )\n  )",
                "name": "(mine-rocks player mine pickaxe rock ore)",
                "pddlAction": "mine-rocks",
                "pddlParams": [
                    "player",
                    "mine",
                    "pickaxe",
                    "rock",
                    "ore"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player mine furnace)\n    :precondition\n      (and\n        (at player mine)\n        (not\n          (at player furnace)\n        )\n        (not\n          (= mine furnace)\n        )\n      )\n    :effect\n      (and\n        (at player furnace)\n        (not\n          (at player mine)\n        )\n      )\n  )",
                "name": "(move-to player mine furnace)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "mine",
                    "furnace"
                ]
            },
            {
                "action": "  (:action smelt-ore\n    :parameters (player furnace ore bars)\n    :precondition\n      (and\n        (at player furnace)\n        (has player ore)\n      )\n    :effect\n      (and\n        (has player bars)\n        (not\n          (has player ore)\n        )\n      )\n  )",
                "name": "(smelt-ore player furnace ore bars)",
                "pddlAction": "smelt-ore",
                "pddlParams": [
                    "player",
                    "furnace",
                    "ore",
                    "bars"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player furnace shed)\n    :precondition\n      (and\n        (at player furnace)\n        (not\n          (at player shed)\n        )\n        (not\n          (= furnace shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player furnace)\n        )\n      )\n  )",
                "name": "(move-to player furnace shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "furnace",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player pickaxe shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player pickaxe)\n      )\n    :effect\n      (and\n        (has shed pickaxe)\n        (not\n          (has player pickaxe)\n        )\n      )\n  )",
                "name": "(store player pickaxe shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "pickaxe",
                    "shed"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player hammer shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed hammer)\n      )\n    :effect\n      (and\n        (has player hammer)\n      )\n  )",
                "name": "(equip player hammer shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "hammer",
                    "shed"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player shed anvil)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player anvil)\n        )\n        (not\n          (= shed anvil)\n        )\n      )\n    :effect\n      (and\n        (at player anvil)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed anvil)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "anvil"
                ]
            },
            {
                "action": "  (:action smithe-bars\n    :parameters (player anvil hammer bars sword)\n    :precondition\n      (and\n        (at player anvil)\n        (has player bars)\n        (has player hammer)\n      )\n    :effect\n      (and\n        (has player sword)\n        (not\n          (has player bars)\n        )\n      )\n  )",
                "name": "(smithe-bars player anvil hammer bars sword)",
                "pddlAction": "smithe-bars",
                "pddlParams": [
                    "player",
                    "anvil",
                    "hammer",
                    "bars",
                    "sword"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player anvil shed)\n    :precondition\n      (and\n        (at player anvil)\n        (not\n          (at player shed)\n        )\n        (not\n          (= anvil shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player anvil)\n        )\n      )\n  )",
                "name": "(move-to player anvil shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "anvil",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player sword shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player sword)\n      )\n    :effect\n      (and\n        (has shed sword)\n        (not\n          (has player sword)\n        )\n      )\n  )",
                "name": "(store player sword shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "sword",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player hammer shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player hammer)\n      )\n    :effect\n      (and\n        (has shed hammer)\n        (not\n          (has player hammer)\n        )\n      )\n  )",
                "name": "(store player hammer shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "hammer",
                    "shed"
                ]
            }
        ],
        "cost": null,
        "valStdout": null,
        "valStderr": null,
        "valStatus": null,
        "planPath": "/tmp/solver_planning_domains_tmp_2oP8FMNwVFleK/plan",
        "logPath": "/tmp/solver_planning_domains_tmp_2oP8FMNwVFleK/log"
    },
    "valid": true
}