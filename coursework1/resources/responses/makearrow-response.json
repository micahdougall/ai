{
    "status": "ok",
    "result": {
        "output": "\n\ntask contains conditional effects. turning off state domination.\n\n --- OK.\n Match tree built with 61 nodes.\n\nPDDL problem description loaded: \n\tDomain: RUNESCAPE\n\tProblem: MAKEARROW\n\t#Actions: 61\n\t#Fluents: 51\nLandmarks found: 12\nStarting search with IW (time budget is 60 secs)...\nrel_plan size: 19\n#RP_fluents 28\nCaption\n{#goals, #UNnachieved,  #Achieved} -> IW(max_w)\n\n{12/12/0}:IW(1) -> rel_plan size: 19\n#RP_fluents 28\n{12/1/11}:IW(1) -> [2][3][4][5][6][7][8][9][10][11][12][13][14][15][16][17];; NOT I-REACHABLE ;;\nTotal time: -1.8999e-10\nNodes generated during search: 160\nNodes expanded during search: 159\nIW search completed\nStarting search with BFS(novel,land,h_add)...\n--[4294967295 / 209]--\n--[1 / 209]--\n--[1 / 186]--\n--[1 / 184]--\n--[1 / 172]--\n--[1 / 107]--\n--[1 / 105]--\n--[1 / 81]--\n--[1 / 75]--\n--[1 / 42]--\n--[1 / 30]--\n--[1 / 29]--\n--[1 / 27]--\n--[1 / 20]--\n--[1 / 16]--\n--[1 / 12]--\n--[1 / 8]--\n--[1 / 7]--\n--[1 / 5]--\n--[1 / 4]--\n--[1 / 3]--\n--[1 / 1]--\n--[1 / 0]--\nTotal time: 0.012\nNodes generated during search: 1107\nNodes expanded during search: 135\nPlan found with cost: 33\nBFS search completed\n",
        "parseStatus": "ok",
        "error": null,
        "type": "full",
        "length": 33,
        "plan": [
            {
                "action": "  (:action move-to\n    :parameters (player shed farm)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player farm)\n        )\n        (not\n          (= shed farm)\n        )\n      )\n    :effect\n      (and\n        (at player farm)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed farm)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "farm"
                ]
            },
            {
                "action": "  (:action hunt-chicken\n    :parameters (player farm chickens feathers)\n    :precondition\n      (and\n        (at player farm)\n        (has farm chickens)\n      )\n    :effect\n      (and\n        (has player feathers)\n      )\n  )",
                "name": "(hunt-chicken player farm chickens feathers)",
                "pddlAction": "hunt-chicken",
                "pddlParams": [
                    "player",
                    "farm",
                    "chickens",
                    "feathers"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player farm shed)\n    :precondition\n      (and\n        (at player farm)\n        (not\n          (at player shed)\n        )\n        (not\n          (= farm shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player farm)\n        )\n      )\n  )",
                "name": "(move-to player farm shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "farm",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player feathers shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player feathers)\n      )\n    :effect\n      (and\n        (has shed feathers)\n        (not\n          (has player feathers)\n        )\n      )\n  )",
                "name": "(store player feathers shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "feathers",
                    "shed"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player feathers shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed feathers)\n      )\n    :effect\n      (and\n        (has player feathers)\n      )\n  )",
                "name": "(equip player feathers shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "feathers",
                    "shed"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player pickaxe shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed pickaxe)\n      )\n    :effect\n      (and\n        (has player pickaxe)\n      )\n  )",
                "name": "(equip player pickaxe shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "pickaxe",
                    "shed"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player shed mine)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player mine)\n        )\n        (not\n          (= shed mine)\n        )\n      )\n    :effect\n      (and\n        (at player mine)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed mine)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "mine"
                ]
            },
            {
                "action": "  (:action mine-rocks\n    :parameters (player mine pickaxe rock ore)\n    :precondition\n      (and\n        (at player mine)\n        (has player pickaxe)\n        (has mine rock)\n      )\n    :effect\n      (and\n        (has player ore)\n      )\n  )",
                "name": "(mine-rocks player mine pickaxe rock ore)",
                "pddlAction": "mine-rocks",
                "pddlParams": [
                    "player",
                    "mine",
                    "pickaxe",
                    "rock",
                    "ore"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player mine shed)\n    :precondition\n      (and\n        (at player mine)\n        (not\n          (at player shed)\n        )\n        (not\n          (= mine shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player mine)\n        )\n      )\n  )",
                "name": "(move-to player mine shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "mine",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player pickaxe shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player pickaxe)\n      )\n    :effect\n      (and\n        (has shed pickaxe)\n        (not\n          (has player pickaxe)\n        )\n      )\n  )",
                "name": "(store player pickaxe shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "pickaxe",
                    "shed"
                ]
            },
            {
                "action": "  (:action affix\n    :parameters (player arrow feathers)\n    :precondition\n      (and\n        (has player feathers)\n      )\n    :effect\n      (and\n        (includes arrow feathers)\n        (not\n          (has player feathers)\n        )\n        (when\n          (and\n            (exists ?a includes)\n            (exists ?f includes)\n            (exists ?s includes)\n          )\n          (and\n            (has player arrow)\n          )\n        )\n      )\n  )",
                "name": "(affix player arrow feathers)",
                "pddlAction": "affix",
                "pddlParams": [
                    "player",
                    "arrow",
                    "feathers"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player feathers shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed feathers)\n      )\n    :effect\n      (and\n        (has player feathers)\n      )\n  )",
                "name": "(equip player feathers shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "feathers",
                    "shed"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player shed furnace)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player furnace)\n        )\n        (not\n          (= shed furnace)\n        )\n      )\n    :effect\n      (and\n        (at player furnace)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed furnace)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "furnace"
                ]
            },
            {
                "action": "  (:action smelt-ore\n    :parameters (player furnace ore bars)\n    :precondition\n      (and\n        (at player furnace)\n        (has player ore)\n      )\n    :effect\n      (and\n        (has player bars)\n        (not\n          (has player ore)\n        )\n      )\n  )",
                "name": "(smelt-ore player furnace ore bars)",
                "pddlAction": "smelt-ore",
                "pddlParams": [
                    "player",
                    "furnace",
                    "ore",
                    "bars"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player furnace shed)\n    :precondition\n      (and\n        (at player furnace)\n        (not\n          (at player shed)\n        )\n        (not\n          (= furnace shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player furnace)\n        )\n      )\n  )",
                "name": "(move-to player furnace shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "furnace",
                    "shed"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player axe shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed axe)\n      )\n    :effect\n      (and\n        (has player axe)\n      )\n  )",
                "name": "(equip player axe shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "axe",
                    "shed"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player shed forest)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player forest)\n        )\n        (not\n          (= shed forest)\n        )\n      )\n    :effect\n      (and\n        (at player forest)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed forest)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "forest"
                ]
            },
            {
                "action": "  (:action chop-trees\n    :parameters (player forest axe trees wood)\n    :precondition\n      (and\n        (at player forest)\n        (has player axe)\n        (has forest trees)\n      )\n    :effect\n      (and\n        (has player wood)\n      )\n  )",
                "name": "(chop-trees player forest axe trees wood)",
                "pddlAction": "chop-trees",
                "pddlParams": [
                    "player",
                    "forest",
                    "axe",
                    "trees",
                    "wood"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player forest shed)\n    :precondition\n      (and\n        (at player forest)\n        (not\n          (at player shed)\n        )\n        (not\n          (= forest shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player forest)\n        )\n      )\n  )",
                "name": "(move-to player forest shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "forest",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player axe shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player axe)\n      )\n    :effect\n      (and\n        (has shed axe)\n        (not\n          (has player axe)\n        )\n      )\n  )",
                "name": "(store player axe shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "axe",
                    "shed"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player knife shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed knife)\n      )\n    :effect\n      (and\n        (has player knife)\n      )\n  )",
                "name": "(equip player knife shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "knife",
                    "shed"
                ]
            },
            {
                "action": "  (:action fletch-shafts\n    :parameters (player knife wood shafts)\n    :precondition\n      (and\n        (has player wood)\n        (has player knife)\n      )\n    :effect\n      (and\n        (has player shafts)\n        (not\n          (has player wood)\n        )\n      )\n  )",
                "name": "(fletch-shafts player knife wood shafts)",
                "pddlAction": "fletch-shafts",
                "pddlParams": [
                    "player",
                    "knife",
                    "wood",
                    "shafts"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player knife shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player knife)\n      )\n    :effect\n      (and\n        (has shed knife)\n        (not\n          (has player knife)\n        )\n      )\n  )",
                "name": "(store player knife shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "knife",
                    "shed"
                ]
            },
            {
                "action": "  (:action affix\n    :parameters (player arrow shafts)\n    :precondition\n      (and\n        (has player shafts)\n      )\n    :effect\n      (and\n        (includes arrow shafts)\n        (not\n          (has player shafts)\n        )\n        (when\n          (and\n            (exists ?a includes)\n            (exists ?f includes)\n            (exists ?s includes)\n          )\n          (and\n            (has player arrow)\n          )\n        )\n      )\n  )",
                "name": "(affix player arrow shafts)",
                "pddlAction": "affix",
                "pddlParams": [
                    "player",
                    "arrow",
                    "shafts"
                ]
            },
            {
                "action": "  (:action equip\n    :parameters (player hammer shed)\n    :precondition\n      (and\n        (at player shed)\n        (forall (?t - tool)\n          (not\n            (has player ?t)\n          )\n        )\n        (has shed hammer)\n      )\n    :effect\n      (and\n        (has player hammer)\n      )\n  )",
                "name": "(equip player hammer shed)",
                "pddlAction": "equip",
                "pddlParams": [
                    "player",
                    "hammer",
                    "shed"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player shed mine)\n    :precondition\n      (and\n        (at player shed)\n        (not\n          (at player mine)\n        )\n        (not\n          (= shed mine)\n        )\n      )\n    :effect\n      (and\n        (at player mine)\n        (not\n          (at player shed)\n        )\n      )\n  )",
                "name": "(move-to player shed mine)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "shed",
                    "mine"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player mine anvil)\n    :precondition\n      (and\n        (at player mine)\n        (not\n          (at player anvil)\n        )\n        (not\n          (= mine anvil)\n        )\n      )\n    :effect\n      (and\n        (at player anvil)\n        (not\n          (at player mine)\n        )\n      )\n  )",
                "name": "(move-to player mine anvil)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "mine",
                    "anvil"
                ]
            },
            {
                "action": "  (:action smithe-bars\n    :parameters (player anvil hammer bars arrowhead)\n    :precondition\n      (and\n        (at player anvil)\n        (has player bars)\n        (has player hammer)\n      )\n    :effect\n      (and\n        (has player arrowhead)\n        (not\n          (has player bars)\n        )\n      )\n  )",
                "name": "(smithe-bars player anvil hammer bars arrowhead)",
                "pddlAction": "smithe-bars",
                "pddlParams": [
                    "player",
                    "anvil",
                    "hammer",
                    "bars",
                    "arrowhead"
                ]
            },
            {
                "action": "  (:action move-to\n    :parameters (player anvil shed)\n    :precondition\n      (and\n        (at player anvil)\n        (not\n          (at player shed)\n        )\n        (not\n          (= anvil shed)\n        )\n      )\n    :effect\n      (and\n        (at player shed)\n        (not\n          (at player anvil)\n        )\n      )\n  )",
                "name": "(move-to player anvil shed)",
                "pddlAction": "move-to",
                "pddlParams": [
                    "player",
                    "anvil",
                    "shed"
                ]
            },
            {
                "action": "  (:action affix\n    :parameters (player arrow arrowhead)\n    :precondition\n      (and\n        (has player arrowhead)\n      )\n    :effect\n      (and\n        (includes arrow arrowhead)\n        (not\n          (has player arrowhead)\n        )\n        (when\n          (and\n            (exists ?a includes)\n            (exists ?f includes)\n            (exists ?s includes)\n          )\n          (and\n            (has player arrow)\n          )\n        )\n      )\n  )",
                "name": "(affix player arrow arrowhead)",
                "pddlAction": "affix",
                "pddlParams": [
                    "player",
                    "arrow",
                    "arrowhead"
                ]
            },
            {
                "action": "  (:action affix\n    :parameters (player arrow feathers)\n    :precondition\n      (and\n        (has player feathers)\n      )\n    :effect\n      (and\n        (includes arrow feathers)\n        (not\n          (has player feathers)\n        )\n        (when\n          (and\n            (exists ?a includes)\n            (exists ?f includes)\n            (exists ?s includes)\n          )\n          (and\n            (has player arrow)\n          )\n        )\n      )\n  )",
                "name": "(affix player arrow feathers)",
                "pddlAction": "affix",
                "pddlParams": [
                    "player",
                    "arrow",
                    "feathers"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player arrow shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player arrow)\n      )\n    :effect\n      (and\n        (has shed arrow)\n        (not\n          (has player arrow)\n        )\n      )\n  )",
                "name": "(store player arrow shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "arrow",
                    "shed"
                ]
            },
            {
                "action": "  (:action store\n    :parameters (player hammer shed)\n    :precondition\n      (and\n        (at player shed)\n        (has player hammer)\n      )\n    :effect\n      (and\n        (has shed hammer)\n        (not\n          (has player hammer)\n        )\n      )\n  )",
                "name": "(store player hammer shed)",
                "pddlAction": "store",
                "pddlParams": [
                    "player",
                    "hammer",
                    "shed"
                ]
            }
        ],
        "cost": null,
        "valStdout": null,
        "valStderr": null,
        "valStatus": null,
        "planPath": "/tmp/solver_planning_domains_tmp_26yewd25DqsZ3/plan",
        "logPath": "/tmp/solver_planning_domains_tmp_26yewd25DqsZ3/log"
    },
    "valid": true
}